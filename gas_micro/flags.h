/*
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include <gflags/gflags.h>

DECLARE_uint64(num_threads);
DECLARE_string(model);
DECLARE_string(train_opponent);
DECLARE_string(eval_opponent);
DECLARE_double(sigma);
DECLARE_double(lr);
DECLARE_uint64(batch_size);
DECLARE_string(scenario);
DECLARE_bool(list_scenarios);
DECLARE_uint64(checkpoint_freq);
DECLARE_string(map_path_prefix);
DECLARE_uint64(max_frames);
DECLARE_uint64(max_episodes);
DECLARE_uint64(updates_per_epoch);
DECLARE_uint64(max_games_per_provider);
DECLARE_uint64(frame_skip);
DECLARE_bool(enable_gui);
DECLARE_bool(illustrate);
DECLARE_string(results);
DECLARE_uint64(test_freq);
DECLARE_uint64(stats_freq);
DECLARE_uint64(num_test_episodes);
DECLARE_double(realtime);
DECLARE_string(resume);
DECLARE_bool(evaluate);
DECLARE_bool(gpu);
DECLARE_bool(sample_command);
DECLARE_string(visdom_server);
DECLARE_int32(visdom_port);
DECLARE_string(visdom_env);
DECLARE_uint64(plot_every);
DECLARE_string(dump_replays);
DECLARE_uint64(dump_replays_rate);
DECLARE_double(plague_threshold);
DECLARE_double(dark_swarm_threshold);
DECLARE_bool(debug_update);
DECLARE_string(sampler);
DECLARE_string(trainer);
DECLARE_uint64(max_lod);
DECLARE_int32(override_action);
DECLARE_uint64(command_offset);
DECLARE_uint64(min_lod);
DECLARE_uint64(lod_growth_length);
DECLARE_uint64(lod_lead_in);
DECLARE_uint64(epsilon_decay_length);
DECLARE_bool(only_train_max_lod);
DECLARE_uint64(gas_on_plateau);
DECLARE_double(epsilon_min);
DECLARE_double(epsilon_max);
DECLARE_uint64(nsteps);
DECLARE_uint64(action_repeat);
DECLARE_double(gradient_clipping);
DECLARE_double(reward_scale);
DECLARE_bool(sparse_reward);
DECLARE_double(dmg_scale);
DECLARE_double(death_scale);
DECLARE_double(dmg_taken_scale);
DECLARE_double(kill_scale);
DECLARE_double(win_scale);
DECLARE_string(custom_scenario_unit);
DECLARE_string(custom_scenario_enemy);
DECLARE_int32(custom_scenario_num);
DECLARE_int32(custom_scenario_sep);
DECLARE_int32(custom_scenario_advantage);
DECLARE_bool(gas_reuse_centroids);
DECLARE_bool(gas_max_targets);
DECLARE_bool(group_w_unittype);
DECLARE_int32(unit_type_dist);
DECLARE_uint64(act_grid_sz);
DECLARE_int32(custom_scenario_split);
DECLARE_double(discount);
DECLARE_double(time_penalty);
DECLARE_bool(a2c);
DECLARE_double(entropy_loss_coef);
DECLARE_double(match_loss_coef);
DECLARE_bool(custom_scenario_angle);
DECLARE_bool(max_pool);
DECLARE_bool(state_value);
