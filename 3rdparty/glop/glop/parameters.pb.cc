// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/glop/parameters.proto

#include "parameters.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace operations_research {
namespace glop {
class GlopParametersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlopParameters>
      _instance;
} _GlopParameters_default_instance_;
}  // namespace glop
}  // namespace operations_research
namespace protobuf_ortools_2fglop_2fparameters_2eproto {
void InitDefaultsGlopParametersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::operations_research::glop::_GlopParameters_default_instance_;
    new (ptr) ::operations_research::glop::GlopParameters();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::operations_research::glop::GlopParameters::InitAsDefaultInstance();
}

void InitDefaultsGlopParameters() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGlopParametersImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, scaling_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, feasibility_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, optimization_rule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, normalize_using_column_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, use_nested_pricing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, refactorization_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, recompute_reduced_costs_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, recompute_edges_norm_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, primal_feasibility_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, dual_feasibility_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, ratio_test_zero_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, harris_tolerance_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, small_pivot_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, minimum_acceptable_pivot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, drop_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, use_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, initial_basis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, use_transposed_matrix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, basis_refactorization_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, solve_dual_problem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, dualizer_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, solution_feasibility_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, provide_strong_optimal_guarantee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, max_number_of_reoptimizations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, lu_factorization_pivot_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, max_time_in_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, max_deterministic_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, max_number_of_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, markowitz_zlatev_parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, markowitz_singularity_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, use_dual_simplex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, allow_simplex_algorithm_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, devex_weights_reset_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, use_preprocessing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, use_middle_product_form_update_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, initialize_devex_with_column_norms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, exploit_singleton_column_in_initial_basis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, dual_small_pivot_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, preprocessor_zero_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, objective_lower_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, objective_upper_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, degenerate_ministep_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, num_omp_threads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, use_solowhalim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, perturb_costs_in_dual_simplex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, relative_cost_perturbation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::operations_research::glop::GlopParameters, relative_max_cost_perturbation_),
  4,
  5,
  6,
  13,
  14,
  7,
  8,
  9,
  10,
  11,
  12,
  18,
  19,
  20,
  44,
  15,
  17,
  16,
  21,
  22,
  23,
  24,
  30,
  47,
  25,
  26,
  43,
  27,
  29,
  28,
  0,
  1,
  34,
  31,
  32,
  33,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  2,
  3,
  45,
  46,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 53, sizeof(::operations_research::glop::GlopParameters)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::operations_research::glop::_GlopParameters_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ortools/glop/parameters.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035ortools/glop/parameters.proto\022\030operati"
      "ons_research.glop\"\317\023\n\016GlopParameters\022`\n\016"
      "scaling_method\0309 \001(\01629.operations_resear"
      "ch.glop.GlopParameters.ScalingAlgorithm:"
      "\rEQUILIBRATION\022]\n\020feasibility_rule\030\001 \001(\016"
      "24.operations_research.glop.GlopParamete"
      "rs.PricingRule:\rSTEEPEST_EDGE\022^\n\021optimiz"
      "ation_rule\030\002 \001(\01624.operations_research.g"
      "lop.GlopParameters.PricingRule:\rSTEEPEST"
      "_EDGE\022)\n\033normalize_using_column_norm\030\004 \001"
      "(\010:\004true\022 \n\022use_nested_pricing\030\005 \001(\010:\004tr"
      "ue\022(\n\031refactorization_threshold\030\006 \001(\001:\0051"
      "e-09\0220\n!recompute_reduced_costs_threshol"
      "d\030\010 \001(\001:\0051e-08\022+\n\036recompute_edges_norm_t"
      "hreshold\030\t \001(\001:\003100\022+\n\034primal_feasibilit"
      "y_tolerance\030\n \001(\001:\0051e-08\022)\n\032dual_feasibi"
      "lity_tolerance\030\013 \001(\001:\0051e-08\022(\n\031ratio_tes"
      "t_zero_threshold\030\014 \001(\001:\0051e-09\022#\n\026harris_"
      "tolerance_ratio\030\r \001(\001:\0030.5\022$\n\025small_pivo"
      "t_threshold\030\016 \001(\001:\0051e-06\022\'\n\030minimum_acce"
      "ptable_pivot\030\017 \001(\001:\0051e-06\022\035\n\016drop_tolera"
      "nce\0304 \001(\001:\0051e-14\022\031\n\013use_scaling\030\020 \001(\010:\004t"
      "rue\022a\n\rinitial_basis\030\021 \001(\0162>.operations_"
      "research.glop.GlopParameters.InitialBasi"
      "sHeuristic:\nTRIANGULAR\022#\n\025use_transposed"
      "_matrix\030\022 \001(\010:\004true\022(\n\034basis_refactoriza"
      "tion_period\030\023 \001(\005:\00264\022f\n\022solve_dual_prob"
      "lem\030\024 \001(\01627.operations_research.glop.Glo"
      "pParameters.SolverBehavior:\021LET_SOLVER_D"
      "ECIDE\022\037\n\022dualizer_threshold\030\025 \001(\001:\0031.5\022-"
      "\n\036solution_feasibility_tolerance\030\026 \001(\001:\005"
      "1e-06\022.\n provide_strong_optimal_guarante"
      "e\030\030 \001(\010:\004true\022)\n\035max_number_of_reoptimiz"
      "ations\0308 \001(\001:\00240\022.\n lu_factorization_piv"
      "ot_threshold\030\031 \001(\001:\0040.01\022 \n\023max_time_in_"
      "seconds\030\032 \001(\001:\003inf\022#\n\026max_deterministic_"
      "time\030- \001(\001:\003inf\022$\n\030max_number_of_iterati"
      "ons\030\033 \001(\003:\002-1\022%\n\032markowitz_zlatev_parame"
      "ter\030\035 \001(\005:\0013\022.\n\037markowitz_singularity_th"
      "reshold\030\036 \001(\001:\0051e-15\022\037\n\020use_dual_simplex"
      "\030\037 \001(\010:\005false\022-\n\036allow_simplex_algorithm"
      "_change\030  \001(\010:\005false\022\'\n\032devex_weights_re"
      "set_period\030! \001(\005:\003150\022\037\n\021use_preprocessi"
      "ng\030\" \001(\010:\004true\022,\n\036use_middle_product_for"
      "m_update\030# \001(\010:\004true\0220\n\"initialize_devex"
      "_with_column_norms\030$ \001(\010:\004true\0227\n)exploi"
      "t_singleton_column_in_initial_basis\030% \001("
      "\010:\004true\022*\n\032dual_small_pivot_threshold\030& "
      "\001(\001:\0060.0001\022*\n\033preprocessor_zero_toleran"
      "ce\030\' \001(\001:\0051e-09\022#\n\025objective_lower_limit"
      "\030( \001(\001:\004-inf\022\"\n\025objective_upper_limit\030) "
      "\001(\001:\003inf\022(\n\032degenerate_ministep_factor\030*"
      " \001(\001:\0040.01\022\026\n\013random_seed\030+ \001(\005:\0011\022\032\n\017nu"
      "m_omp_threads\030, \001(\005:\0011\022\035\n\016use_solowhalim"
      "\030. \001(\010:\005false\022,\n\035perturb_costs_in_dual_s"
      "implex\0305 \001(\010:\005false\022)\n\032relative_cost_per"
      "turbation\0306 \001(\001:\0051e-05\022-\n\036relative_max_c"
      "ost_perturbation\0307 \001(\001:\0051e-07\"F\n\020Scaling"
      "Algorithm\022\013\n\007DEFAULT\020\000\022\021\n\rEQUILIBRATION\020"
      "\001\022\022\n\016LINEAR_PROGRAM\020\002\"D\n\016SolverBehavior\022"
      "\r\n\tALWAYS_DO\020\000\022\014\n\010NEVER_DO\020\001\022\025\n\021LET_SOLV"
      "ER_DECIDE\020\002\"8\n\013PricingRule\022\013\n\007DANTZIG\020\000\022"
      "\021\n\rSTEEPEST_EDGE\020\001\022\t\n\005DEVEX\020\002\"<\n\025Initial"
      "BasisHeuristic\022\010\n\004NONE\020\000\022\t\n\005BIXBY\020\001\022\016\n\nT"
      "RIANGULAR\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ortools/glop/parameters.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ortools_2fglop_2fparameters_2eproto
namespace operations_research {
namespace glop {
const ::google::protobuf::EnumDescriptor* GlopParameters_ScalingAlgorithm_descriptor() {
  protobuf_ortools_2fglop_2fparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ortools_2fglop_2fparameters_2eproto::file_level_enum_descriptors[0];
}
bool GlopParameters_ScalingAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GlopParameters_ScalingAlgorithm GlopParameters::DEFAULT;
const GlopParameters_ScalingAlgorithm GlopParameters::EQUILIBRATION;
const GlopParameters_ScalingAlgorithm GlopParameters::LINEAR_PROGRAM;
const GlopParameters_ScalingAlgorithm GlopParameters::ScalingAlgorithm_MIN;
const GlopParameters_ScalingAlgorithm GlopParameters::ScalingAlgorithm_MAX;
const int GlopParameters::ScalingAlgorithm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GlopParameters_SolverBehavior_descriptor() {
  protobuf_ortools_2fglop_2fparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ortools_2fglop_2fparameters_2eproto::file_level_enum_descriptors[1];
}
bool GlopParameters_SolverBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GlopParameters_SolverBehavior GlopParameters::ALWAYS_DO;
const GlopParameters_SolverBehavior GlopParameters::NEVER_DO;
const GlopParameters_SolverBehavior GlopParameters::LET_SOLVER_DECIDE;
const GlopParameters_SolverBehavior GlopParameters::SolverBehavior_MIN;
const GlopParameters_SolverBehavior GlopParameters::SolverBehavior_MAX;
const int GlopParameters::SolverBehavior_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GlopParameters_PricingRule_descriptor() {
  protobuf_ortools_2fglop_2fparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ortools_2fglop_2fparameters_2eproto::file_level_enum_descriptors[2];
}
bool GlopParameters_PricingRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GlopParameters_PricingRule GlopParameters::DANTZIG;
const GlopParameters_PricingRule GlopParameters::STEEPEST_EDGE;
const GlopParameters_PricingRule GlopParameters::DEVEX;
const GlopParameters_PricingRule GlopParameters::PricingRule_MIN;
const GlopParameters_PricingRule GlopParameters::PricingRule_MAX;
const int GlopParameters::PricingRule_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GlopParameters_InitialBasisHeuristic_descriptor() {
  protobuf_ortools_2fglop_2fparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ortools_2fglop_2fparameters_2eproto::file_level_enum_descriptors[3];
}
bool GlopParameters_InitialBasisHeuristic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GlopParameters_InitialBasisHeuristic GlopParameters::NONE;
const GlopParameters_InitialBasisHeuristic GlopParameters::BIXBY;
const GlopParameters_InitialBasisHeuristic GlopParameters::TRIANGULAR;
const GlopParameters_InitialBasisHeuristic GlopParameters::InitialBasisHeuristic_MIN;
const GlopParameters_InitialBasisHeuristic GlopParameters::InitialBasisHeuristic_MAX;
const int GlopParameters::InitialBasisHeuristic_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void GlopParameters::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlopParameters::kScalingMethodFieldNumber;
const int GlopParameters::kFeasibilityRuleFieldNumber;
const int GlopParameters::kOptimizationRuleFieldNumber;
const int GlopParameters::kNormalizeUsingColumnNormFieldNumber;
const int GlopParameters::kUseNestedPricingFieldNumber;
const int GlopParameters::kRefactorizationThresholdFieldNumber;
const int GlopParameters::kRecomputeReducedCostsThresholdFieldNumber;
const int GlopParameters::kRecomputeEdgesNormThresholdFieldNumber;
const int GlopParameters::kPrimalFeasibilityToleranceFieldNumber;
const int GlopParameters::kDualFeasibilityToleranceFieldNumber;
const int GlopParameters::kRatioTestZeroThresholdFieldNumber;
const int GlopParameters::kHarrisToleranceRatioFieldNumber;
const int GlopParameters::kSmallPivotThresholdFieldNumber;
const int GlopParameters::kMinimumAcceptablePivotFieldNumber;
const int GlopParameters::kDropToleranceFieldNumber;
const int GlopParameters::kUseScalingFieldNumber;
const int GlopParameters::kInitialBasisFieldNumber;
const int GlopParameters::kUseTransposedMatrixFieldNumber;
const int GlopParameters::kBasisRefactorizationPeriodFieldNumber;
const int GlopParameters::kSolveDualProblemFieldNumber;
const int GlopParameters::kDualizerThresholdFieldNumber;
const int GlopParameters::kSolutionFeasibilityToleranceFieldNumber;
const int GlopParameters::kProvideStrongOptimalGuaranteeFieldNumber;
const int GlopParameters::kMaxNumberOfReoptimizationsFieldNumber;
const int GlopParameters::kLuFactorizationPivotThresholdFieldNumber;
const int GlopParameters::kMaxTimeInSecondsFieldNumber;
const int GlopParameters::kMaxDeterministicTimeFieldNumber;
const int GlopParameters::kMaxNumberOfIterationsFieldNumber;
const int GlopParameters::kMarkowitzZlatevParameterFieldNumber;
const int GlopParameters::kMarkowitzSingularityThresholdFieldNumber;
const int GlopParameters::kUseDualSimplexFieldNumber;
const int GlopParameters::kAllowSimplexAlgorithmChangeFieldNumber;
const int GlopParameters::kDevexWeightsResetPeriodFieldNumber;
const int GlopParameters::kUsePreprocessingFieldNumber;
const int GlopParameters::kUseMiddleProductFormUpdateFieldNumber;
const int GlopParameters::kInitializeDevexWithColumnNormsFieldNumber;
const int GlopParameters::kExploitSingletonColumnInInitialBasisFieldNumber;
const int GlopParameters::kDualSmallPivotThresholdFieldNumber;
const int GlopParameters::kPreprocessorZeroToleranceFieldNumber;
const int GlopParameters::kObjectiveLowerLimitFieldNumber;
const int GlopParameters::kObjectiveUpperLimitFieldNumber;
const int GlopParameters::kDegenerateMinistepFactorFieldNumber;
const int GlopParameters::kRandomSeedFieldNumber;
const int GlopParameters::kNumOmpThreadsFieldNumber;
const int GlopParameters::kUseSolowhalimFieldNumber;
const int GlopParameters::kPerturbCostsInDualSimplexFieldNumber;
const int GlopParameters::kRelativeCostPerturbationFieldNumber;
const int GlopParameters::kRelativeMaxCostPerturbationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlopParameters::GlopParameters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ortools_2fglop_2fparameters_2eproto::InitDefaultsGlopParameters();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:operations_research.glop.GlopParameters)
}
GlopParameters::GlopParameters(const GlopParameters& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_dual_simplex_, &from.use_dual_simplex_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_reoptimizations_) -
    reinterpret_cast<char*>(&use_dual_simplex_)) + sizeof(max_number_of_reoptimizations_));
  // @@protoc_insertion_point(copy_constructor:operations_research.glop.GlopParameters)
}

void GlopParameters::SharedCtor() {
  ::memset(&use_dual_simplex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perturb_costs_in_dual_simplex_) -
      reinterpret_cast<char*>(&use_dual_simplex_)) + sizeof(perturb_costs_in_dual_simplex_));
  scaling_method_ = 1;
  feasibility_rule_ = 1;
  optimization_rule_ = 1;
  refactorization_threshold_ = 1e-09;
  recompute_reduced_costs_threshold_ = 1e-08;
  recompute_edges_norm_threshold_ = 100;
  primal_feasibility_tolerance_ = 1e-08;
  dual_feasibility_tolerance_ = 1e-08;
  ratio_test_zero_threshold_ = 1e-09;
  normalize_using_column_norm_ = true;
  use_nested_pricing_ = true;
  use_scaling_ = true;
  use_transposed_matrix_ = true;
  initial_basis_ = 2;
  harris_tolerance_ratio_ = 0.5;
  small_pivot_threshold_ = 1e-06;
  minimum_acceptable_pivot_ = 1e-06;
  basis_refactorization_period_ = 64;
  solve_dual_problem_ = 2;
  dualizer_threshold_ = 1.5;
  solution_feasibility_tolerance_ = 1e-06;
  lu_factorization_pivot_threshold_ = 0.01;
  max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
  max_number_of_iterations_ = GOOGLE_LONGLONG(-1);
  markowitz_singularity_threshold_ = 1e-15;
  markowitz_zlatev_parameter_ = 3;
  provide_strong_optimal_guarantee_ = true;
  use_preprocessing_ = true;
  use_middle_product_form_update_ = true;
  initialize_devex_with_column_norms_ = true;
  devex_weights_reset_period_ = 150;
  exploit_singleton_column_in_initial_basis_ = true;
  dual_small_pivot_threshold_ = 0.0001;
  preprocessor_zero_tolerance_ = 1e-09;
  objective_lower_limit_ = -::google::protobuf::internal::Infinity();
  objective_upper_limit_ = ::google::protobuf::internal::Infinity();
  degenerate_ministep_factor_ = 0.01;
  random_seed_ = 1;
  num_omp_threads_ = 1;
  max_deterministic_time_ = ::google::protobuf::internal::Infinity();
  drop_tolerance_ = 1e-14;
  relative_cost_perturbation_ = 1e-05;
  relative_max_cost_perturbation_ = 1e-07;
  max_number_of_reoptimizations_ = 40;
  _cached_size_ = 0;
}

GlopParameters::~GlopParameters() {
  // @@protoc_insertion_point(destructor:operations_research.glop.GlopParameters)
  SharedDtor();
}

void GlopParameters::SharedDtor() {
}

void GlopParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlopParameters::descriptor() {
  ::protobuf_ortools_2fglop_2fparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ortools_2fglop_2fparameters_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlopParameters& GlopParameters::default_instance() {
  ::protobuf_ortools_2fglop_2fparameters_2eproto::InitDefaultsGlopParameters();
  return *internal_default_instance();
}

GlopParameters* GlopParameters::New(::google::protobuf::Arena* arena) const {
  GlopParameters* n = new GlopParameters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlopParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:operations_research.glop.GlopParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_dual_simplex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perturb_costs_in_dual_simplex_) -
      reinterpret_cast<char*>(&use_dual_simplex_)) + sizeof(perturb_costs_in_dual_simplex_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 240u) {
    scaling_method_ = 1;
    feasibility_rule_ = 1;
    optimization_rule_ = 1;
    refactorization_threshold_ = 1e-09;
  }
  if (cached_has_bits & 65280u) {
    recompute_reduced_costs_threshold_ = 1e-08;
    recompute_edges_norm_threshold_ = 100;
    primal_feasibility_tolerance_ = 1e-08;
    dual_feasibility_tolerance_ = 1e-08;
    ratio_test_zero_threshold_ = 1e-09;
    normalize_using_column_norm_ = true;
    use_nested_pricing_ = true;
    use_scaling_ = true;
  }
  if (cached_has_bits & 16711680u) {
    use_transposed_matrix_ = true;
    initial_basis_ = 2;
    harris_tolerance_ratio_ = 0.5;
    small_pivot_threshold_ = 1e-06;
    minimum_acceptable_pivot_ = 1e-06;
    basis_refactorization_period_ = 64;
    solve_dual_problem_ = 2;
    dualizer_threshold_ = 1.5;
  }
  if (cached_has_bits & 4278190080u) {
    solution_feasibility_tolerance_ = 1e-06;
    lu_factorization_pivot_threshold_ = 0.01;
    max_time_in_seconds_ = ::google::protobuf::internal::Infinity();
    max_number_of_iterations_ = GOOGLE_LONGLONG(-1);
    markowitz_singularity_threshold_ = 1e-15;
    markowitz_zlatev_parameter_ = 3;
    provide_strong_optimal_guarantee_ = true;
    use_preprocessing_ = true;
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    use_middle_product_form_update_ = true;
    initialize_devex_with_column_norms_ = true;
    devex_weights_reset_period_ = 150;
    exploit_singleton_column_in_initial_basis_ = true;
    dual_small_pivot_threshold_ = 0.0001;
    preprocessor_zero_tolerance_ = 1e-09;
    objective_lower_limit_ = -::google::protobuf::internal::Infinity();
    objective_upper_limit_ = ::google::protobuf::internal::Infinity();
  }
  if (cached_has_bits & 65280u) {
    degenerate_ministep_factor_ = 0.01;
    random_seed_ = 1;
    num_omp_threads_ = 1;
    max_deterministic_time_ = ::google::protobuf::internal::Infinity();
    drop_tolerance_ = 1e-14;
    relative_cost_perturbation_ = 1e-05;
    relative_max_cost_perturbation_ = 1e-07;
    max_number_of_reoptimizations_ = 40;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlopParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:operations_research.glop.GlopParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_PricingRule_IsValid(value)) {
            set_feasibility_rule(static_cast< ::operations_research::glop::GlopParameters_PricingRule >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_PricingRule_IsValid(value)) {
            set_optimization_rule(static_cast< ::operations_research::glop::GlopParameters_PricingRule >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize_using_column_norm = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_normalize_using_column_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_using_column_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_nested_pricing = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_use_nested_pricing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_nested_pricing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double refactorization_threshold = 6 [default = 1e-09];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_refactorization_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &refactorization_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double recompute_reduced_costs_threshold = 8 [default = 1e-08];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_recompute_reduced_costs_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recompute_reduced_costs_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double recompute_edges_norm_threshold = 9 [default = 100];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_recompute_edges_norm_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recompute_edges_norm_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double primal_feasibility_tolerance = 10 [default = 1e-08];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_primal_feasibility_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &primal_feasibility_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dual_feasibility_tolerance = 11 [default = 1e-08];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_dual_feasibility_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dual_feasibility_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ratio_test_zero_threshold = 12 [default = 1e-09];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_ratio_test_zero_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_test_zero_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double harris_tolerance_ratio = 13 [default = 0.5];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_harris_tolerance_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &harris_tolerance_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double small_pivot_threshold = 14 [default = 1e-06];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_small_pivot_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &small_pivot_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double minimum_acceptable_pivot = 15 [default = 1e-06];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_minimum_acceptable_pivot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minimum_acceptable_pivot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_scaling = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_use_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_InitialBasisHeuristic_IsValid(value)) {
            set_initial_basis(static_cast< ::operations_research::glop::GlopParameters_InitialBasisHeuristic >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_transposed_matrix = 18 [default = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_use_transposed_matrix();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_transposed_matrix_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 basis_refactorization_period = 19 [default = 64];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_basis_refactorization_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &basis_refactorization_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_SolverBehavior_IsValid(value)) {
            set_solve_dual_problem(static_cast< ::operations_research::glop::GlopParameters_SolverBehavior >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dualizer_threshold = 21 [default = 1.5];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_dualizer_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dualizer_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double solution_feasibility_tolerance = 22 [default = 1e-06];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_solution_feasibility_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &solution_feasibility_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool provide_strong_optimal_guarantee = 24 [default = true];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_provide_strong_optimal_guarantee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &provide_strong_optimal_guarantee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_lu_factorization_pivot_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lu_factorization_pivot_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_time_in_seconds = 26 [default = inf];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_max_time_in_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_in_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_number_of_iterations = 27 [default = -1];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_max_number_of_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_number_of_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_markowitz_zlatev_parameter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &markowitz_zlatev_parameter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double markowitz_singularity_threshold = 30 [default = 1e-15];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_markowitz_singularity_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &markowitz_singularity_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_dual_simplex = 31 [default = false];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_use_dual_simplex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_dual_simplex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_simplex_algorithm_change = 32 [default = false];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_allow_simplex_algorithm_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_simplex_algorithm_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 devex_weights_reset_period = 33 [default = 150];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_devex_weights_reset_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devex_weights_reset_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_preprocessing = 34 [default = true];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_use_preprocessing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_preprocessing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_middle_product_form_update = 35 [default = true];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_use_middle_product_form_update();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_middle_product_form_update_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool initialize_devex_with_column_norms = 36 [default = true];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_initialize_devex_with_column_norms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialize_devex_with_column_norms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_exploit_singleton_column_in_initial_basis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exploit_singleton_column_in_initial_basis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {
          set_has_dual_small_pivot_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dual_small_pivot_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double preprocessor_zero_tolerance = 39 [default = 1e-09];
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {
          set_has_preprocessor_zero_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preprocessor_zero_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double objective_lower_limit = 40 [default = -inf];
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 321 & 0xFF */)) {
          set_has_objective_lower_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_lower_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double objective_upper_limit = 41 [default = inf];
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 329 & 0xFF */)) {
          set_has_objective_upper_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &objective_upper_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double degenerate_ministep_factor = 42 [default = 0.01];
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 337 & 0xFF */)) {
          set_has_degenerate_ministep_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &degenerate_ministep_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 random_seed = 43 [default = 1];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_omp_threads = 44 [default = 1];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_num_omp_threads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_omp_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_deterministic_time = 45 [default = inf];
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 361 & 0xFF */)) {
          set_has_max_deterministic_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deterministic_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_solowhalim = 46 [default = false];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_use_solowhalim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_solowhalim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double drop_tolerance = 52 [default = 1e-14];
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 417 & 0xFF */)) {
          set_has_drop_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drop_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool perturb_costs_in_dual_simplex = 53 [default = false];
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_perturb_costs_in_dual_simplex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &perturb_costs_in_dual_simplex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_cost_perturbation = 54 [default = 1e-05];
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 433 & 0xFF */)) {
          set_has_relative_cost_perturbation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_cost_perturbation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_max_cost_perturbation = 55 [default = 1e-07];
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 441 & 0xFF */)) {
          set_has_relative_max_cost_perturbation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_max_cost_perturbation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_number_of_reoptimizations = 56 [default = 40];
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 449 & 0xFF */)) {
          set_has_max_number_of_reoptimizations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_number_of_reoptimizations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .operations_research.glop.GlopParameters.ScalingAlgorithm scaling_method = 57 [default = EQUILIBRATION];
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::operations_research::glop::GlopParameters_ScalingAlgorithm_IsValid(value)) {
            set_scaling_method(static_cast< ::operations_research::glop::GlopParameters_ScalingAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                57, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:operations_research.glop.GlopParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:operations_research.glop.GlopParameters)
  return false;
#undef DO_
}

void GlopParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:operations_research.glop.GlopParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->feasibility_rule(), output);
  }

  // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->optimization_rule(), output);
  }

  // optional bool normalize_using_column_norm = 4 [default = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->normalize_using_column_norm(), output);
  }

  // optional bool use_nested_pricing = 5 [default = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_nested_pricing(), output);
  }

  // optional double refactorization_threshold = 6 [default = 1e-09];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->refactorization_threshold(), output);
  }

  // optional double recompute_reduced_costs_threshold = 8 [default = 1e-08];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->recompute_reduced_costs_threshold(), output);
  }

  // optional double recompute_edges_norm_threshold = 9 [default = 100];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->recompute_edges_norm_threshold(), output);
  }

  // optional double primal_feasibility_tolerance = 10 [default = 1e-08];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->primal_feasibility_tolerance(), output);
  }

  // optional double dual_feasibility_tolerance = 11 [default = 1e-08];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dual_feasibility_tolerance(), output);
  }

  // optional double ratio_test_zero_threshold = 12 [default = 1e-09];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ratio_test_zero_threshold(), output);
  }

  // optional double harris_tolerance_ratio = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->harris_tolerance_ratio(), output);
  }

  // optional double small_pivot_threshold = 14 [default = 1e-06];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->small_pivot_threshold(), output);
  }

  // optional double minimum_acceptable_pivot = 15 [default = 1e-06];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->minimum_acceptable_pivot(), output);
  }

  // optional bool use_scaling = 16 [default = true];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_scaling(), output);
  }

  // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->initial_basis(), output);
  }

  // optional bool use_transposed_matrix = 18 [default = true];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->use_transposed_matrix(), output);
  }

  // optional int32 basis_refactorization_period = 19 [default = 64];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->basis_refactorization_period(), output);
  }

  // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->solve_dual_problem(), output);
  }

  // optional double dualizer_threshold = 21 [default = 1.5];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->dualizer_threshold(), output);
  }

  // optional double solution_feasibility_tolerance = 22 [default = 1e-06];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->solution_feasibility_tolerance(), output);
  }

  // optional bool provide_strong_optimal_guarantee = 24 [default = true];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->provide_strong_optimal_guarantee(), output);
  }

  // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lu_factorization_pivot_threshold(), output);
  }

  // optional double max_time_in_seconds = 26 [default = inf];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->max_time_in_seconds(), output);
  }

  // optional int64 max_number_of_iterations = 27 [default = -1];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->max_number_of_iterations(), output);
  }

  // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->markowitz_zlatev_parameter(), output);
  }

  // optional double markowitz_singularity_threshold = 30 [default = 1e-15];
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->markowitz_singularity_threshold(), output);
  }

  // optional bool use_dual_simplex = 31 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->use_dual_simplex(), output);
  }

  // optional bool allow_simplex_algorithm_change = 32 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->allow_simplex_algorithm_change(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 devex_weights_reset_period = 33 [default = 150];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->devex_weights_reset_period(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_preprocessing = 34 [default = true];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->use_preprocessing(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_middle_product_form_update = 35 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->use_middle_product_form_update(), output);
  }

  // optional bool initialize_devex_with_column_norms = 36 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->initialize_devex_with_column_norms(), output);
  }

  // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->exploit_singleton_column_in_initial_basis(), output);
  }

  // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->dual_small_pivot_threshold(), output);
  }

  // optional double preprocessor_zero_tolerance = 39 [default = 1e-09];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->preprocessor_zero_tolerance(), output);
  }

  // optional double objective_lower_limit = 40 [default = -inf];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->objective_lower_limit(), output);
  }

  // optional double objective_upper_limit = 41 [default = inf];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->objective_upper_limit(), output);
  }

  // optional double degenerate_ministep_factor = 42 [default = 0.01];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->degenerate_ministep_factor(), output);
  }

  // optional int32 random_seed = 43 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->random_seed(), output);
  }

  // optional int32 num_omp_threads = 44 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->num_omp_threads(), output);
  }

  // optional double max_deterministic_time = 45 [default = inf];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->max_deterministic_time(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_solowhalim = 46 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->use_solowhalim(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double drop_tolerance = 52 [default = 1e-14];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(52, this->drop_tolerance(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool perturb_costs_in_dual_simplex = 53 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->perturb_costs_in_dual_simplex(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double relative_cost_perturbation = 54 [default = 1e-05];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->relative_cost_perturbation(), output);
  }

  // optional double relative_max_cost_perturbation = 55 [default = 1e-07];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->relative_max_cost_perturbation(), output);
  }

  // optional double max_number_of_reoptimizations = 56 [default = 40];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->max_number_of_reoptimizations(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.glop.GlopParameters.ScalingAlgorithm scaling_method = 57 [default = EQUILIBRATION];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      57, this->scaling_method(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:operations_research.glop.GlopParameters)
}

::google::protobuf::uint8* GlopParameters::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:operations_research.glop.GlopParameters)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->feasibility_rule(), target);
  }

  // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->optimization_rule(), target);
  }

  // optional bool normalize_using_column_norm = 4 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->normalize_using_column_norm(), target);
  }

  // optional bool use_nested_pricing = 5 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_nested_pricing(), target);
  }

  // optional double refactorization_threshold = 6 [default = 1e-09];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->refactorization_threshold(), target);
  }

  // optional double recompute_reduced_costs_threshold = 8 [default = 1e-08];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->recompute_reduced_costs_threshold(), target);
  }

  // optional double recompute_edges_norm_threshold = 9 [default = 100];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->recompute_edges_norm_threshold(), target);
  }

  // optional double primal_feasibility_tolerance = 10 [default = 1e-08];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->primal_feasibility_tolerance(), target);
  }

  // optional double dual_feasibility_tolerance = 11 [default = 1e-08];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dual_feasibility_tolerance(), target);
  }

  // optional double ratio_test_zero_threshold = 12 [default = 1e-09];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ratio_test_zero_threshold(), target);
  }

  // optional double harris_tolerance_ratio = 13 [default = 0.5];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->harris_tolerance_ratio(), target);
  }

  // optional double small_pivot_threshold = 14 [default = 1e-06];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->small_pivot_threshold(), target);
  }

  // optional double minimum_acceptable_pivot = 15 [default = 1e-06];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->minimum_acceptable_pivot(), target);
  }

  // optional bool use_scaling = 16 [default = true];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_scaling(), target);
  }

  // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->initial_basis(), target);
  }

  // optional bool use_transposed_matrix = 18 [default = true];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->use_transposed_matrix(), target);
  }

  // optional int32 basis_refactorization_period = 19 [default = 64];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->basis_refactorization_period(), target);
  }

  // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->solve_dual_problem(), target);
  }

  // optional double dualizer_threshold = 21 [default = 1.5];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->dualizer_threshold(), target);
  }

  // optional double solution_feasibility_tolerance = 22 [default = 1e-06];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->solution_feasibility_tolerance(), target);
  }

  // optional bool provide_strong_optimal_guarantee = 24 [default = true];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->provide_strong_optimal_guarantee(), target);
  }

  // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lu_factorization_pivot_threshold(), target);
  }

  // optional double max_time_in_seconds = 26 [default = inf];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->max_time_in_seconds(), target);
  }

  // optional int64 max_number_of_iterations = 27 [default = -1];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->max_number_of_iterations(), target);
  }

  // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->markowitz_zlatev_parameter(), target);
  }

  // optional double markowitz_singularity_threshold = 30 [default = 1e-15];
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->markowitz_singularity_threshold(), target);
  }

  // optional bool use_dual_simplex = 31 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->use_dual_simplex(), target);
  }

  // optional bool allow_simplex_algorithm_change = 32 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->allow_simplex_algorithm_change(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 devex_weights_reset_period = 33 [default = 150];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->devex_weights_reset_period(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_preprocessing = 34 [default = true];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->use_preprocessing(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool use_middle_product_form_update = 35 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->use_middle_product_form_update(), target);
  }

  // optional bool initialize_devex_with_column_norms = 36 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->initialize_devex_with_column_norms(), target);
  }

  // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->exploit_singleton_column_in_initial_basis(), target);
  }

  // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->dual_small_pivot_threshold(), target);
  }

  // optional double preprocessor_zero_tolerance = 39 [default = 1e-09];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->preprocessor_zero_tolerance(), target);
  }

  // optional double objective_lower_limit = 40 [default = -inf];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->objective_lower_limit(), target);
  }

  // optional double objective_upper_limit = 41 [default = inf];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->objective_upper_limit(), target);
  }

  // optional double degenerate_ministep_factor = 42 [default = 0.01];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->degenerate_ministep_factor(), target);
  }

  // optional int32 random_seed = 43 [default = 1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->random_seed(), target);
  }

  // optional int32 num_omp_threads = 44 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->num_omp_threads(), target);
  }

  // optional double max_deterministic_time = 45 [default = inf];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->max_deterministic_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool use_solowhalim = 46 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->use_solowhalim(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double drop_tolerance = 52 [default = 1e-14];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(52, this->drop_tolerance(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool perturb_costs_in_dual_simplex = 53 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->perturb_costs_in_dual_simplex(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double relative_cost_perturbation = 54 [default = 1e-05];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->relative_cost_perturbation(), target);
  }

  // optional double relative_max_cost_perturbation = 55 [default = 1e-07];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->relative_max_cost_perturbation(), target);
  }

  // optional double max_number_of_reoptimizations = 56 [default = 40];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->max_number_of_reoptimizations(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .operations_research.glop.GlopParameters.ScalingAlgorithm scaling_method = 57 [default = EQUILIBRATION];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      57, this->scaling_method(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operations_research.glop.GlopParameters)
  return target;
}

size_t GlopParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operations_research.glop.GlopParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool use_dual_simplex = 31 [default = false];
    if (has_use_dual_simplex()) {
      total_size += 2 + 1;
    }

    // optional bool allow_simplex_algorithm_change = 32 [default = false];
    if (has_allow_simplex_algorithm_change()) {
      total_size += 2 + 1;
    }

    // optional bool use_solowhalim = 46 [default = false];
    if (has_use_solowhalim()) {
      total_size += 2 + 1;
    }

    // optional bool perturb_costs_in_dual_simplex = 53 [default = false];
    if (has_perturb_costs_in_dual_simplex()) {
      total_size += 2 + 1;
    }

    // optional .operations_research.glop.GlopParameters.ScalingAlgorithm scaling_method = 57 [default = EQUILIBRATION];
    if (has_scaling_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scaling_method());
    }

    // optional .operations_research.glop.GlopParameters.PricingRule feasibility_rule = 1 [default = STEEPEST_EDGE];
    if (has_feasibility_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feasibility_rule());
    }

    // optional .operations_research.glop.GlopParameters.PricingRule optimization_rule = 2 [default = STEEPEST_EDGE];
    if (has_optimization_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optimization_rule());
    }

    // optional double refactorization_threshold = 6 [default = 1e-09];
    if (has_refactorization_threshold()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double recompute_reduced_costs_threshold = 8 [default = 1e-08];
    if (has_recompute_reduced_costs_threshold()) {
      total_size += 1 + 8;
    }

    // optional double recompute_edges_norm_threshold = 9 [default = 100];
    if (has_recompute_edges_norm_threshold()) {
      total_size += 1 + 8;
    }

    // optional double primal_feasibility_tolerance = 10 [default = 1e-08];
    if (has_primal_feasibility_tolerance()) {
      total_size += 1 + 8;
    }

    // optional double dual_feasibility_tolerance = 11 [default = 1e-08];
    if (has_dual_feasibility_tolerance()) {
      total_size += 1 + 8;
    }

    // optional double ratio_test_zero_threshold = 12 [default = 1e-09];
    if (has_ratio_test_zero_threshold()) {
      total_size += 1 + 8;
    }

    // optional bool normalize_using_column_norm = 4 [default = true];
    if (has_normalize_using_column_norm()) {
      total_size += 1 + 1;
    }

    // optional bool use_nested_pricing = 5 [default = true];
    if (has_use_nested_pricing()) {
      total_size += 1 + 1;
    }

    // optional bool use_scaling = 16 [default = true];
    if (has_use_scaling()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool use_transposed_matrix = 18 [default = true];
    if (has_use_transposed_matrix()) {
      total_size += 2 + 1;
    }

    // optional .operations_research.glop.GlopParameters.InitialBasisHeuristic initial_basis = 17 [default = TRIANGULAR];
    if (has_initial_basis()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initial_basis());
    }

    // optional double harris_tolerance_ratio = 13 [default = 0.5];
    if (has_harris_tolerance_ratio()) {
      total_size += 1 + 8;
    }

    // optional double small_pivot_threshold = 14 [default = 1e-06];
    if (has_small_pivot_threshold()) {
      total_size += 1 + 8;
    }

    // optional double minimum_acceptable_pivot = 15 [default = 1e-06];
    if (has_minimum_acceptable_pivot()) {
      total_size += 1 + 8;
    }

    // optional int32 basis_refactorization_period = 19 [default = 64];
    if (has_basis_refactorization_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basis_refactorization_period());
    }

    // optional .operations_research.glop.GlopParameters.SolverBehavior solve_dual_problem = 20 [default = LET_SOLVER_DECIDE];
    if (has_solve_dual_problem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->solve_dual_problem());
    }

    // optional double dualizer_threshold = 21 [default = 1.5];
    if (has_dualizer_threshold()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double solution_feasibility_tolerance = 22 [default = 1e-06];
    if (has_solution_feasibility_tolerance()) {
      total_size += 2 + 8;
    }

    // optional double lu_factorization_pivot_threshold = 25 [default = 0.01];
    if (has_lu_factorization_pivot_threshold()) {
      total_size += 2 + 8;
    }

    // optional double max_time_in_seconds = 26 [default = inf];
    if (has_max_time_in_seconds()) {
      total_size += 2 + 8;
    }

    // optional int64 max_number_of_iterations = 27 [default = -1];
    if (has_max_number_of_iterations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_number_of_iterations());
    }

    // optional double markowitz_singularity_threshold = 30 [default = 1e-15];
    if (has_markowitz_singularity_threshold()) {
      total_size += 2 + 8;
    }

    // optional int32 markowitz_zlatev_parameter = 29 [default = 3];
    if (has_markowitz_zlatev_parameter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->markowitz_zlatev_parameter());
    }

    // optional bool provide_strong_optimal_guarantee = 24 [default = true];
    if (has_provide_strong_optimal_guarantee()) {
      total_size += 2 + 1;
    }

    // optional bool use_preprocessing = 34 [default = true];
    if (has_use_preprocessing()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool use_middle_product_form_update = 35 [default = true];
    if (has_use_middle_product_form_update()) {
      total_size += 2 + 1;
    }

    // optional bool initialize_devex_with_column_norms = 36 [default = true];
    if (has_initialize_devex_with_column_norms()) {
      total_size += 2 + 1;
    }

    // optional int32 devex_weights_reset_period = 33 [default = 150];
    if (has_devex_weights_reset_period()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devex_weights_reset_period());
    }

    // optional bool exploit_singleton_column_in_initial_basis = 37 [default = true];
    if (has_exploit_singleton_column_in_initial_basis()) {
      total_size += 2 + 1;
    }

    // optional double dual_small_pivot_threshold = 38 [default = 0.0001];
    if (has_dual_small_pivot_threshold()) {
      total_size += 2 + 8;
    }

    // optional double preprocessor_zero_tolerance = 39 [default = 1e-09];
    if (has_preprocessor_zero_tolerance()) {
      total_size += 2 + 8;
    }

    // optional double objective_lower_limit = 40 [default = -inf];
    if (has_objective_lower_limit()) {
      total_size += 2 + 8;
    }

    // optional double objective_upper_limit = 41 [default = inf];
    if (has_objective_upper_limit()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional double degenerate_ministep_factor = 42 [default = 0.01];
    if (has_degenerate_ministep_factor()) {
      total_size += 2 + 8;
    }

    // optional int32 random_seed = 43 [default = 1];
    if (has_random_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional int32 num_omp_threads = 44 [default = 1];
    if (has_num_omp_threads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_omp_threads());
    }

    // optional double max_deterministic_time = 45 [default = inf];
    if (has_max_deterministic_time()) {
      total_size += 2 + 8;
    }

    // optional double drop_tolerance = 52 [default = 1e-14];
    if (has_drop_tolerance()) {
      total_size += 2 + 8;
    }

    // optional double relative_cost_perturbation = 54 [default = 1e-05];
    if (has_relative_cost_perturbation()) {
      total_size += 2 + 8;
    }

    // optional double relative_max_cost_perturbation = 55 [default = 1e-07];
    if (has_relative_max_cost_perturbation()) {
      total_size += 2 + 8;
    }

    // optional double max_number_of_reoptimizations = 56 [default = 40];
    if (has_max_number_of_reoptimizations()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlopParameters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:operations_research.glop.GlopParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const GlopParameters* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlopParameters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:operations_research.glop.GlopParameters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:operations_research.glop.GlopParameters)
    MergeFrom(*source);
  }
}

void GlopParameters::MergeFrom(const GlopParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operations_research.glop.GlopParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      use_dual_simplex_ = from.use_dual_simplex_;
    }
    if (cached_has_bits & 0x00000002u) {
      allow_simplex_algorithm_change_ = from.allow_simplex_algorithm_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_solowhalim_ = from.use_solowhalim_;
    }
    if (cached_has_bits & 0x00000008u) {
      perturb_costs_in_dual_simplex_ = from.perturb_costs_in_dual_simplex_;
    }
    if (cached_has_bits & 0x00000010u) {
      scaling_method_ = from.scaling_method_;
    }
    if (cached_has_bits & 0x00000020u) {
      feasibility_rule_ = from.feasibility_rule_;
    }
    if (cached_has_bits & 0x00000040u) {
      optimization_rule_ = from.optimization_rule_;
    }
    if (cached_has_bits & 0x00000080u) {
      refactorization_threshold_ = from.refactorization_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      recompute_reduced_costs_threshold_ = from.recompute_reduced_costs_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      recompute_edges_norm_threshold_ = from.recompute_edges_norm_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      primal_feasibility_tolerance_ = from.primal_feasibility_tolerance_;
    }
    if (cached_has_bits & 0x00000800u) {
      dual_feasibility_tolerance_ = from.dual_feasibility_tolerance_;
    }
    if (cached_has_bits & 0x00001000u) {
      ratio_test_zero_threshold_ = from.ratio_test_zero_threshold_;
    }
    if (cached_has_bits & 0x00002000u) {
      normalize_using_column_norm_ = from.normalize_using_column_norm_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_nested_pricing_ = from.use_nested_pricing_;
    }
    if (cached_has_bits & 0x00008000u) {
      use_scaling_ = from.use_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      use_transposed_matrix_ = from.use_transposed_matrix_;
    }
    if (cached_has_bits & 0x00020000u) {
      initial_basis_ = from.initial_basis_;
    }
    if (cached_has_bits & 0x00040000u) {
      harris_tolerance_ratio_ = from.harris_tolerance_ratio_;
    }
    if (cached_has_bits & 0x00080000u) {
      small_pivot_threshold_ = from.small_pivot_threshold_;
    }
    if (cached_has_bits & 0x00100000u) {
      minimum_acceptable_pivot_ = from.minimum_acceptable_pivot_;
    }
    if (cached_has_bits & 0x00200000u) {
      basis_refactorization_period_ = from.basis_refactorization_period_;
    }
    if (cached_has_bits & 0x00400000u) {
      solve_dual_problem_ = from.solve_dual_problem_;
    }
    if (cached_has_bits & 0x00800000u) {
      dualizer_threshold_ = from.dualizer_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      solution_feasibility_tolerance_ = from.solution_feasibility_tolerance_;
    }
    if (cached_has_bits & 0x02000000u) {
      lu_factorization_pivot_threshold_ = from.lu_factorization_pivot_threshold_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_time_in_seconds_ = from.max_time_in_seconds_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_number_of_iterations_ = from.max_number_of_iterations_;
    }
    if (cached_has_bits & 0x10000000u) {
      markowitz_singularity_threshold_ = from.markowitz_singularity_threshold_;
    }
    if (cached_has_bits & 0x20000000u) {
      markowitz_zlatev_parameter_ = from.markowitz_zlatev_parameter_;
    }
    if (cached_has_bits & 0x40000000u) {
      provide_strong_optimal_guarantee_ = from.provide_strong_optimal_guarantee_;
    }
    if (cached_has_bits & 0x80000000u) {
      use_preprocessing_ = from.use_preprocessing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      use_middle_product_form_update_ = from.use_middle_product_form_update_;
    }
    if (cached_has_bits & 0x00000002u) {
      initialize_devex_with_column_norms_ = from.initialize_devex_with_column_norms_;
    }
    if (cached_has_bits & 0x00000004u) {
      devex_weights_reset_period_ = from.devex_weights_reset_period_;
    }
    if (cached_has_bits & 0x00000008u) {
      exploit_singleton_column_in_initial_basis_ = from.exploit_singleton_column_in_initial_basis_;
    }
    if (cached_has_bits & 0x00000010u) {
      dual_small_pivot_threshold_ = from.dual_small_pivot_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      preprocessor_zero_tolerance_ = from.preprocessor_zero_tolerance_;
    }
    if (cached_has_bits & 0x00000040u) {
      objective_lower_limit_ = from.objective_lower_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      objective_upper_limit_ = from.objective_upper_limit_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      degenerate_ministep_factor_ = from.degenerate_ministep_factor_;
    }
    if (cached_has_bits & 0x00000200u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x00000400u) {
      num_omp_threads_ = from.num_omp_threads_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_deterministic_time_ = from.max_deterministic_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      drop_tolerance_ = from.drop_tolerance_;
    }
    if (cached_has_bits & 0x00002000u) {
      relative_cost_perturbation_ = from.relative_cost_perturbation_;
    }
    if (cached_has_bits & 0x00004000u) {
      relative_max_cost_perturbation_ = from.relative_max_cost_perturbation_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_number_of_reoptimizations_ = from.max_number_of_reoptimizations_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void GlopParameters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:operations_research.glop.GlopParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlopParameters::CopyFrom(const GlopParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operations_research.glop.GlopParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlopParameters::IsInitialized() const {
  return true;
}

void GlopParameters::Swap(GlopParameters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlopParameters::InternalSwap(GlopParameters* other) {
  using std::swap;
  swap(use_dual_simplex_, other->use_dual_simplex_);
  swap(allow_simplex_algorithm_change_, other->allow_simplex_algorithm_change_);
  swap(use_solowhalim_, other->use_solowhalim_);
  swap(perturb_costs_in_dual_simplex_, other->perturb_costs_in_dual_simplex_);
  swap(scaling_method_, other->scaling_method_);
  swap(feasibility_rule_, other->feasibility_rule_);
  swap(optimization_rule_, other->optimization_rule_);
  swap(refactorization_threshold_, other->refactorization_threshold_);
  swap(recompute_reduced_costs_threshold_, other->recompute_reduced_costs_threshold_);
  swap(recompute_edges_norm_threshold_, other->recompute_edges_norm_threshold_);
  swap(primal_feasibility_tolerance_, other->primal_feasibility_tolerance_);
  swap(dual_feasibility_tolerance_, other->dual_feasibility_tolerance_);
  swap(ratio_test_zero_threshold_, other->ratio_test_zero_threshold_);
  swap(normalize_using_column_norm_, other->normalize_using_column_norm_);
  swap(use_nested_pricing_, other->use_nested_pricing_);
  swap(use_scaling_, other->use_scaling_);
  swap(use_transposed_matrix_, other->use_transposed_matrix_);
  swap(initial_basis_, other->initial_basis_);
  swap(harris_tolerance_ratio_, other->harris_tolerance_ratio_);
  swap(small_pivot_threshold_, other->small_pivot_threshold_);
  swap(minimum_acceptable_pivot_, other->minimum_acceptable_pivot_);
  swap(basis_refactorization_period_, other->basis_refactorization_period_);
  swap(solve_dual_problem_, other->solve_dual_problem_);
  swap(dualizer_threshold_, other->dualizer_threshold_);
  swap(solution_feasibility_tolerance_, other->solution_feasibility_tolerance_);
  swap(lu_factorization_pivot_threshold_, other->lu_factorization_pivot_threshold_);
  swap(max_time_in_seconds_, other->max_time_in_seconds_);
  swap(max_number_of_iterations_, other->max_number_of_iterations_);
  swap(markowitz_singularity_threshold_, other->markowitz_singularity_threshold_);
  swap(markowitz_zlatev_parameter_, other->markowitz_zlatev_parameter_);
  swap(provide_strong_optimal_guarantee_, other->provide_strong_optimal_guarantee_);
  swap(use_preprocessing_, other->use_preprocessing_);
  swap(use_middle_product_form_update_, other->use_middle_product_form_update_);
  swap(initialize_devex_with_column_norms_, other->initialize_devex_with_column_norms_);
  swap(devex_weights_reset_period_, other->devex_weights_reset_period_);
  swap(exploit_singleton_column_in_initial_basis_, other->exploit_singleton_column_in_initial_basis_);
  swap(dual_small_pivot_threshold_, other->dual_small_pivot_threshold_);
  swap(preprocessor_zero_tolerance_, other->preprocessor_zero_tolerance_);
  swap(objective_lower_limit_, other->objective_lower_limit_);
  swap(objective_upper_limit_, other->objective_upper_limit_);
  swap(degenerate_ministep_factor_, other->degenerate_ministep_factor_);
  swap(random_seed_, other->random_seed_);
  swap(num_omp_threads_, other->num_omp_threads_);
  swap(max_deterministic_time_, other->max_deterministic_time_);
  swap(drop_tolerance_, other->drop_tolerance_);
  swap(relative_cost_perturbation_, other->relative_cost_perturbation_);
  swap(relative_max_cost_perturbation_, other->relative_max_cost_perturbation_);
  swap(max_number_of_reoptimizations_, other->max_number_of_reoptimizations_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlopParameters::GetMetadata() const {
  protobuf_ortools_2fglop_2fparameters_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ortools_2fglop_2fparameters_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace glop
}  // namespace operations_research

// @@protoc_insertion_point(global_scope)
